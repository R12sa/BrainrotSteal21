-- Load Almighty UI
local Almighty = loadstring(game:HttpGet("https://pastefy.app/PHJpZltN/raw"))()

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer

-- Toggle states
local toggleStates = {
    desync = false,
    helpTools = false,
    tween = false
}

-- Create main window with better styling
local Window = Almighty:CreateWindow({
    Title = "ttk- sabtrader1103",
    Theme = "Dark", -- If supported
    Size = {200, 220}
})

local MainTab = Window:CreateTab("Main")

-- Desync functionality
local desyncConnection = nil
local function enableDesync()
    local success, error = pcall(function()
        local backpack = LocalPlayer:WaitForChild("Backpack")
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        
        local packages = ReplicatedStorage:WaitForChild("Packages", 5)
        if not packages then warn("Packages not found") return false end
        
        local netFolder = packages:WaitForChild("Net", 5)
        if not netFolder then warn("Net folder not found") return false end
        
        local useItemRemote = netFolder:WaitForChild("RE/UseItem", 5)
        local teleportRemote = netFolder:WaitForChild("RE/QuantumCloner/OnTeleport", 5)
        if not useItemRemote or not teleportRemote then warn("Remotes not found") return false end
        
        local toolNames = {"Quantum Cloner", "Brainrot", "brainrot"}
        local tool
        
        for _, toolName in ipairs(toolNames) do
            tool = backpack:FindFirstChild(toolName) or character:FindFirstChild(toolName)
            if tool then break end
        end
        
        if not tool then
            for _, item in ipairs(backpack:GetChildren()) do
                if item:IsA("Tool") then tool=item break end
            end
        end
        
        if tool and tool.Parent==backpack then
            humanoid:EquipTool(tool)
            task.wait(0.5)
        end
        
        if setfflag then setfflag("WorldStepMax", "-9999999999") end
        task.wait(0.2)
        
        useItemRemote:FireServer()
        task.wait(1)
        
        teleportRemote:FireServer()
        task.wait(2)
        
        if setfflag then setfflag("WorldStepMax", "-1") end
        return true
    end)
    
    if not success then
        warn("Error activating desync: " .. tostring(error))
        return false
    end
    return success
end

local function disableDesync()
    if desyncConnection then
        desyncConnection:Disconnect()
        desyncConnection = nil
    end
    if setfflag then 
        setfflag("WorldStepMax", "-1") 
    end
    print("Desync disabled")
end

-- Help tools functionality
local helpToolsConnection = nil
local function enableHelpTools()
    -- Add your help tools code here
    print("Help tools enabled")
    -- Example: ESP, aimbot, etc.
end

local function disableHelpTools()
    if helpToolsConnection then
        helpToolsConnection:Disconnect()
        helpToolsConnection = nil
    end
    print("Help tools disabled")
end

-- Tween functionality
local tweenConnection = nil
local function enableTween()
    -- Add your tween/teleport code here
    print("Tween enabled")
    -- Example: click teleport, speed boost, etc.
end

local function disableTween()
    if tweenConnection then
        tweenConnection:Disconnect()
        tweenConnection = nil
    end
    print("Tween disabled")
end

-- Create toggle buttons
MainTab:CreateToggle("Desync", false, function(enabled)
    toggleStates.desync = enabled
    if enabled then
        local success = enableDesync()
        if success then
            print("‚úÖ Desync activated!")
        else
            print("‚ùå Desync failed - check console")
            toggleStates.desync = false
        end
    else
        disableDesync()
        print("üî¥ Desync deactivated!")
    end
end)

MainTab:CreateToggle("Help Tools", false, function(enabled)
    toggleStates.helpTools = enabled
    if enabled then
        enableHelpTools()
        print("‚úÖ Help tools activated!")
    else
        disableHelpTools()
        print("üî¥ Help tools deactivated!")
    end
end)

MainTab:CreateToggle("Tween (might not work)", false, function(enabled)
    toggleStates.tween = enabled
    if enabled then
        enableTween()
        print("‚úÖ Tween activated!")
    else
        disableTween()
        print("üî¥ Tween deactivated!")
    end
end)

-- Add separator
MainTab:CreateLabel("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

-- Add status display
MainTab:CreateLabel("Status: Ready")

-- Auto-cleanup on character respawn
LocalPlayer.CharacterAdded:Connect(function()
    -- Reset all toggles on respawn
    toggleStates.desync = false
    toggleStates.helpTools = false
    toggleStates.tween = false
    
    -- Disconnect all connections
    disableDesync()
    disableHelpTools()
    disableTween()
    
    print("üîÑ Character respawned - all features reset")
end)

-- Cleanup on script end
game:GetService("Players").PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        disableDesync()
        disableHelpTools()
        disableTween()
    end
end)

print("üöÄ Enhanced GUI loaded successfully!")
print("üìã Features: Desync, Help Tools, Tween")
print("üéÆ All features have proper toggle functionality")
